#!/bin/bash
#
# MIT License
#
# Copyright (c) 2017 Jay Caines-Gooby, @jaygooby, jay@gooby.org
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
# Builds nginx with an optional list of
#
# Requires git version 1.7.10 or later (--single-branch option)
# and wget
#
# Call with ./build-nginx to clone and compile the various modules and
# nginx itself. Defaults to building in ~/src/nginx-build
# It will make this folder if it doesn't exist.
#
# To use a different build folder call the script like this:
# BUILD_DIR=/some/folder ./build-nginx
#
# To clone (download) but not compile the modules and nginx source:
# ./build-nginx -d
#
# And to build from an existing ~/src/nginx-build or $BUILD_DIR folder
# ./build-nginx -b
#
# To specify additional options for the nginx configure script, use the
# -o switch:
#
# ./build-nginx -o "--prefix=/usr/local --with-pcre=~/src/pcre-8.41"
#
# If you are building on a Mac and you're also providing an open-ssl source
# directory, you'll need to ensure you export KERNEL_BITS=64
set -eu

# Takes a line like https://github.com/nginx/nginx.git@release-1.12.1
# or https://github.com/nbs-system/naxsi.git@0.55.3,naxsi_src
# where the branch/tag/version is specified by the value after the @
# and optionally, where a directory is also specified after the ,
git_url_version_and_module_configure_dir() {
  echo "$(git_url $1) $(git_version $1) $(module_configure_dir $1)"
}

# Takes a line like https://github.com/nginx/nginx.git@release-1.12.1
# and returns the git url
git_url() {
  echo $1 | cut -sd'@' -f1
}

# Takes a line like https://github.com/nginx/nginx.git@release-1.12.1
# and returns the git url
git_version() {
  echo $1 | cut -d'@' -f2 | cut -d',' -f1
}

# Takes a line like https://github.com/nbs-system/naxsi.git@0.55.3,naxsi_src
# and returns the value after the comma
module_configure_dir() {
  echo $1 | cut -sd',' -f2
}

expand_error() {
  echo nope $1 && exit 1
}

download_and_expand() {
  dir="$1"
  archive_url="$2"
  archive_file="$(basename "$archive_url")"
  wget "$archive_url" -O "$dir/$archive_file"
  case "$archive_url" in
    *tar.gz*) (cd "$dir" && tar -zxf "$archive_file") || expand_error $archive_url ;;
    *tgz*)    (cd "$dir" && tar -zxf "$archive_file") || expand_error $archive_url ;;
    *zip)     (cd "$dir" && unzip "$archive_file") || expand_error $archive_url ;;
  esac
}

clone_error() {
  echo "Couldn't checkout $1 at $2 into $3"
  exit 1
}

# Takes a git repository url as $2 and clones the specific
# branch/tag/version requested in $3 as the folder named in $4
# Does all this in the build folder which is passed in $1
clone_at_version() {
  dir="$1"
  repo="$2"
  tag="${3:-master}"

  if [[ "$repo" =~ \.(zip|tgz|tar\.gz) ]]; then
    # don't clone, download and expand
    download_and_expand "$dir" "$repo"
  else
    # git clone
    cd "$dir"
    rm -rf "$4"
    git clone "$repo" --branch "$tag" --single-branch  "$4" || clone_error "$repo" "$tag" "$4"
  fi
}

#
clone_dependencies() {
  dependencies=($1)
  for dependency in "${dependencies[@]}"; do
    read -r repo_url branch <<<$(git_url_version_and_module_configure_dir $dependency)

    # Only set a branch if we're cloning from git
    # If we're extracting a tgz or zip, we don't care
    if [[ "$repo_url" =~ \.(zip|tgz|tar\.gz) ]]; then
      case "$repo_url" in
        *tar.gz*) extension=".tar.gz" ;;
        *tgz*)    extension=".tgz" ;;
        *zip)     extension=".zip" ;;
      esac
      source_dir="$build_dir/$(basename $repo_url $extension)"
    else
      branch=${branch:-master}
      source_dir="$build_dir/$(basename $repo_url .git)-$branch"
    fi

    # Set the --with-openssl=DIR, --with-zlib=DIR, --with-openssl=DIR or
    # --with-libatomic=DIR nginx configure option if the relevant
    # library has been cloned
    case $repo_url in
      *pcre*)      nginx_configure_options+=(--with-pcre="$source_dir") ;;
      *zlib*)      nginx_configure_options+=(--with-zlib="$source_dir") ;;
      *libatomic*) nginx_configure_options+=(--with-libatomic="$source_dir") ;;
      *openssl*)   nginx_configure_options+=(--with-openssl="$source_dir") ;;
    esac

    if [ -z "${dont_clone:-}" ]; then
      # now git clone the repo at the branch/tag/version we want
      clone_at_version "$build_dir" "$repo_url" "$branch" "$source_dir"
    fi
  done
}

clone_nginx_and_modules() {
  items=0
  add_module=""
  sources="$1"

  # now iterate over the sources array, git cloning the specified
  # branch. If we're cloning any non-core nginx modules, we'll add them
  # to the nginx --configure options for inclusion in the build
  for source in "${sources[@]}"; do
    read -r repo_url branch add_module_dir <<<$(git_url_version_and_module_configure_dir $source)
    branch=${branch:-master}

    source_dir="$build_dir/$(basename $repo_url .git)-$branch"
    add_module_dir="$source_dir/$add_module_dir"
    add_module_dir="${add_module_dir%/}" # strip the trailing slash

    # We don't want add nginx itself (it's always the first element
    # of the sources array)
    if [ $items -eq 0 ]; then
      nginx_dir=$source_dir
    else
      add_module="${add_module:-} --add-module=$add_module_dir"
    fi
    (( items += 1 ))

    if [ -z "${dont_clone:-}" ]; then
      # now git clone the repo at the branch/tag/version we want
      clone_at_version "$build_dir" "$repo_url" "$branch" "$source_dir"
    fi
  done
}

usage() {
  cat <<-USAGE
    -b If you want to build from an existing source repo
    -c If you only want to clone (download) and not build
    -d <dependencies> Specify a git url and branch/tag/version for e.g. pcre
    -k <file> Specify which config file to read this script's arguments from.
              The config file is a text file in which command line arguments
              can be written which then will be used as if they were written
              on the actual command line.
    -h Help
    -m <additional modules> Specify a git url, branch/tag/version and
                            optional src folder where nginx looks for the
                            module config file
    -o <options> To pass additional options to the nginx configure script
    -s <build directory> The directory where this script will git clone
                         nginx and any modules and dependencies it needs
                         to build. Defaults to ~/src/nginx-build
    -n <git-repo and/or version> Optional nginx git repo url and/or optional
                            branch/tag/version. Defaults to
                            https://github.com/nginx/nginx and master. To
                            specify just a branch/tag/version use @branch.
                            To specify both, use git-url@branch

USAGE
}

# set some defaults
build_dir="$HOME/src/nginx-build"
nginx_dir=""
nginx_branch="master"
nginx_repo_and_branch="https://github.com/nginx/nginx.git@${nginx_branch}"
additional_nginx_modules=""
cli_options=""

declare -a nginx_configure_options
declare -a cli_options
declare -a sources

# Parse the options
while getopts ":bcd:k:m:n:o:s:" opt; do
  case ${opt} in
    # -b don't git clone any sources, just cd into the build dir and
    #    recompile. Useful if you're making manual changes.
    b) dont_clone=1 ;;

    # -c download the git sources and then stop. Useful if you need to grab
    #    the sources for caching, archiving etc.
    c) clone_only=1 ;;

    # -d <dependency url> optional dependencies such as pcre and openssl
    d) dependencies="${dependencies:-} ${OPTARG}" ;;

    # -k <file> the file that specifes this script's command line options
    k) while IFS= read -r config; do
         # strip any comments whilst slurping in the file
         config=$(echo -e "${config}" | cut -d'#' -f1)
         if [ -n "${config}" ]; then
           cli_options+=("${config}")
         fi
       done < "${OPTARG}"
       # TODO: if there's a space between $1 and the quoted cli_options like
       # exec $0 "${cli_options[@]}"
       # then the options aren't passed to the command when you use the -k
       # option. There's a space that needs choping
       # somewhere...
       exec $0"${cli_options[@]}"
       ;;

    # -m <non-core nginx modules> optional nginx modules to build
    # we append any previous -m args here so we process them all
    m) additional_nginx_modules="$additional_nginx_modules ${OPTARG}" ;;

    # -n <nginx git url and optional branch/tag/version>
    n) nginx_repo_and_branch="${OPTARG}" ;;

    # -o <options> additional options passed to the nginx configure script
    o) nginx_configure_options+=("$(echo $OPTARG | xargs)") ;;

    # -s <directory> the directory where we'll do the source build
    s) build_dir="$(echo $OPTARG | xargs)" ;;
    :) echo -e "Invalid option: -$OPTARG requires an argument" && usage >&2
       exit 1
       ;;
    \?)
      if [[ $OPTARG = "h" || $OPTARG = "?" ]]; then
        usage >&2
        exit 0
      else
        echo -e "Invalid option: -$OPTARG" && usage >&2
        exit 1
      fi
      ;;
  esac
done

# Make the build folder where all this will happen
mkdir -p "$build_dir" || (echo "Couldn't find or make $build_dir" && exit 1)

# Clone any of the -d dependency libraries that have been requested
if [ -n "${dependencies:-}" ]; then
  clone_dependencies "${dependencies[@]}"
fi

# Then clone nginx and the modules that were requested
sources=("$nginx_repo_and_branch")
for module in $additional_nginx_modules; do
  sources=("${sources[@]}" "$module")
done
clone_nginx_and_modules "${sources[@]}"

# If we're only cloning and not building, we're done
if [ -n "${clone_only:-}" ]; then
  exit 0
fi

# If we're cloning and building, clean, configure and build
cd "$nginx_dir"
make clean || echo "No Makefile to clean"

if [ -n "${nginx_configure_options:-}" ]; then
  echo ./auto/configure "${nginx_configure_options[@]}" $add_module
  ./auto/configure "${nginx_configure_options[@]}" $add_module
else
  ./auto/configure $add_module
fi

make && echo "Built nginx at $nginx_dir/objs/nginx" || echo "Build failed"
# and we're done
